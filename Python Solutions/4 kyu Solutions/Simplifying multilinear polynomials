When we attended middle school were asked to simplify mathematical expressions like "3x-yx+2xy-x" (or usually bigger), and that was easy-peasy ("2x+xy"). But tell that to your pc and we'll see!

Write a function: simplify, that takes a string in input, representing a multilinear non-constant polynomial in integers coefficients (like "3x-zx+2xy-x"), and returns another string as output where the same expression has been simplified in the following way ( -> means application of simplify):

All possible sums and subtraction of equivalent monomials ("xy==yx") has been done, e.g.:
"cb+cba" -> "bc+abc", "2xy-yx" -> "xy", "-a+5ab+3a-c-2a" -> "-c+5ab"


All monomials appears in order of increasing number of variables, e.g.:
"-abc+3a+2ac" -> "3a+2ac-abc", "xyz-xz" -> "-xz+xyz"

If two monomials have the same number of variables, they appears in lexicographic order, e.g.:
"a+ca-ab" -> "a-ab+ac", "xzy+zby" ->"byz+xyz"

There is no leading + sign if the first coefficient is positive, e.g.:
"-y+x" -> "x-y", but no restrictions for -: "y-x" ->"-x+y"

N.B. to keep it simplest, the string in input is restricted to represent only multilinear non-constant polynomials, so you won't find something like `-3+yx^2'. Multilinear means in this context: of degree 1 on each variable.

Warning: the string in input can contain arbitrary variables represented by lowercase characters in the english alphabet.

Good Work :)





def simplify(poly):
    poly = poly.strip('+')
    print(poly)
    d = {}
    i = 0
    sign = '+'
    while i<len(poly):
        if poly[i] in '+-':
            sign = poly[i]
            i += 1
            temp = ''
            while i<len(poly) and poly[i].isdigit():
                temp += poly[i]
                i += 1
            if temp!='':
                temp = int(temp)
            else:
                temp = 1
            temp1 = ''
            while i<len(poly) and poly[i].isalpha():
                temp1 += poly[i]
                i +=1
            g = ''.join(sorted(temp1))
            d[g] = [d[g]+temp,d[g]-temp][sign=='-'] if g in d else [temp,-1*temp][sign=='-']
        else:
            temp = ''
            while i<len(poly) and poly[i].isdigit():
                temp += poly[i]
                i += 1
            if temp!='':
                temp = int(temp)
            else:
                temp = 1
            temp1 = ''
            while i<len(poly) and poly[i].isalpha():
                temp1 += poly[i]
                i +=1
            g = ''.join(sorted(temp1))
            d[g] = [d[g]+temp,d[g]-temp][sign=='-'] if g in d else temp
        print(d)
    result = ['+-'[d[i]<0]+(str(abs(d[i])) if abs(d[i])>1 else '')+i for i in d if d[i]!=0]
    result = sorted(result, key = lambda x: ''.join(i for i in x if i.isalpha()))
    result = sorted(result, key = lambda x: sum(i.isalpha() for i in x))
    return ''.join(result).strip('+')

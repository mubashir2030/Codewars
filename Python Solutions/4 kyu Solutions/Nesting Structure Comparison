Complete the function/method (depending on the language) to return true/True when its argument is an array that has the same nesting structures and same corresponding length of nested arrays as the first array.

For example:

# should return True
same_structure_as([ 1, 1, 1 ], [ 2, 2, 2 ] )
same_structure_as([ 1, [ 1, 1 ] ], [ 2, [ 2, 2 ] ] )

# should return False 
same_structure_as([ 1, [ 1, 1 ] ], [ [ 2, 2 ], 2 ] )
same_structure_as([ 1, [ 1, 1 ] ], [ [ 2 ], 2 ] )

# should return True
same_structure_as([ [ [ ], [ ] ] ], [ [ [ ], [ ] ] ] )

# should return False
same_structure_as([ [ [ ], [ ] ] ], [ [ 1, 1 ] ] )







def same_structure_as(original,other):
    if type(original)!=type(other):
        return False
    if type(original)==list and len(original)!=len(other):
        return False
    if type(original)==type(other)==int:
        return True
    for first, second in zip(original,other):
        if type(first)==list and type(second)!=list:
            return False
        if type(first)==list:
            if len(first)!=len(second):
                return False
            return same_structure_as(first, second)
    return True

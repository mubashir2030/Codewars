You have to find maximum sum of numbers from top left corner of a matrix to bottom right corner.
You can only go down or right.

Input data
    Matrix will be square M x M, 4 ≤ M ≤ 60
    Matrix will have only positive integers N.
    10 ≤ N ≤ 200

Example

matrix = [[20, 20, 10, 10],
          [10, 20, 10, 10],
          [10, 20, 20, 20],
          [10, 10, 10, 20]]

Solution
``` S: start E: end matrix = [[S, ↓, -, -], [-, ↓, -, -], [-, →, →, ↓], [-, -, -, E]]
matrix = [[20, 20, , ], [, 20, , ], [, 20, 20, 20], [, , , 20]]

Top Left Corner, Right, Down, Down, Right, Right, Bottom Right Corner

20 + 20 + 20 + 20 + 20 + 20 + 20 = 140






def find_sum(m):
    rows, cols = len(m), len(m[0])
    check = [[0 for i in range(rows+1)] for j in range(cols+1)]
    for r in range(1, rows+1):
        for c in range(1, cols+1):
            check[r][c] = max(check[r-1][c], check[r][c-1])+m[r-1][c-1]
    return check[rows][cols]

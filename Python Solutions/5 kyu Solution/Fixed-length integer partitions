A generalization of BÃ©zier surfaces, called the S-patch, uses an interesting scheme for indexing its control points.

In the case of an n-sided surface of degree d, each index has n non-negative integers that sum to d, and all possible configurations are used.

For example, for a 3-sided quadratic (degree 2) surface the control points are:

indices 3 2 => [[0,0,2],[0,1,1],[0,2,0],[1,0,1],[1,1,0],[2,0,0]]

Given the degree and the number of sides, generate all control point indices. The order of the indices in the list can be arbitrary, so for the above example

[[1,1,0],[2,0,0],[0,0,2],[0,2,0],[0,1,1],[1,0,1]]

is also a good solution.





from itertools import combinations_with_replacement as cr
def indices(k, n):
    all_part = []
    for div in cr(range(n+1), k-1):
        try:
            counts = [div[0]]
            for i in range(1, k-1):
                counts.append(div[i] - div[i-1])
            counts.append(n-div[-1])
            all_part.append(counts)
        except:
            continue
    return all_part if all_part else [[0]] 

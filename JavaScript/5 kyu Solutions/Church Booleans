There are a few Katas about Church Numerals so let's talk about booleans.

In lambda calculus, the only primitive are lambdas. No numbers, no strings, and of course no booleans. Everything is reduced to anonymous functions.

Booleans are defined thusly (this definition is preloaded for you) :

true  = lambda t: lambda f: t
false = lambda t: lambda f: f
Your task will be to implement basic operators on booleans (using only lambdas and function application) : Not, And, Or and Xor.

To help, the function unchurch comes preloaded, and returns the native boolean given a church boolean :

unchurch(true)  # True
Note: You should not use the following:

native booleans
native boolean operators





const Not = A => A(False)(True);
const And = A => B => A(B)(A);
const Or = A => B => A(A)(B);
const Xor = A => B => A(Not(B))(B);
